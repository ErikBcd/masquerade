searchState.loadedDescShard("masquerade_proxy", 0, "HTTP/3 message types.\nQUIC packet\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the next IPv4 address If the next address isn’t …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a buffered writer for a qlog.\nGenerate a stateless retry token.\nParses an IP and splits off the prefix If the prefix was …\nValidates a stateless retry token.\nUnwrap this as an ADDRESS_ASSIGN capsule\nUnwrap this as an ADDRESS_REQUEST capsule\nUnwrap this as an CLIENT_HELLO capsule\nUnwrap this as an ADDRESS_ADVERTISEMENT capsule\nCreates a new basic capsule containing a CLIENT_HELLO …\nCreates a new basic Capsule containing an ADDRESS_ASSIGN. …\nCreates a new basic Capsule containing an ADDRESS_REQUEST. …\nCreates a new serialized capsule containing a CLIENT_HELLO …\nCreates a new serialized capsule containing an …\nCreates a new serialized capsule containing an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses the body of a DATA type HTTP/3 packet.\nParse a CLIENT_HELLO capsule from a datagram payload\nParse an ADDRESS_ASSIGN capsule from a datagram payload\nParse an ADDRESS_REQUEST capsule from a datagram payload\nParse a ROUTE_ADVERTISEMENT capsule from a datagram payload\nReads an ip from the current position of the given octet. …\nSerializes this capsule Can be sent in a HTTP/3 DATA …\nSerializes the capsule, putting it into buf\nSerializes this capsule Can be sent in a HTTP/3 DATA …\nSerializes this capsule Can be sent in a HTTP/3 DATA …\nSerializes this capsule Can be sent in a HTTP/3 DATA …\nUsed for reading and applying user defined configurations. …\nInfos about the CONNECT-IP session Includes converters for …\nInformation about packets, wether they are to be sent to …\nHolds an ip packet and its direction\nUseful for holding some basic data for a HTTP3 Stream\nCreates a basic QUIC connection to the given server …\nCreates a async TUN device Given arguments will be used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new pair of Source Connection ID and reset …\nCreates and binds the UDP socket used for QUIC\nInitiates the CONNECT-IP request. Arguments: * …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReceives ready-to-send ip packets and then sends them to …\nReceives IP Packets from rx. Will then handle these …\nReceives raw IP messages from a TUN.the Will send received …\nA general handler of a quic connection. Will set up the …\nBasic commands for setting up the TUN interface Will also …\nRecalculate the checksum of a udp or tcp packet References:\nCreates a ToSend struct containing an IP packet\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the header length of a given packet slice The …\nReturns the version of the ip packet slice, given in the …\nRead the checksum of a ipv4 packet Does not <em>calculate</em> the …\nReads the destination addr of a given IPv4 packet. …\nReads the source addr of a given IPv4 packet. Warning: …\nReturn the ttl of a given packet slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecalculates the checksum of a ipv4 packet. If the payload …\nSets the destination ip address of a given IPv4 buffer to …\nSets the source ip address of a given IPv4 buffer to the …\nUpdates the checksum of a IPv4 header to be correct.\nClient for each QUIC connection\nMap of known clients that operate via CONNECT-IP, …\nMap of registered clients that use CONNECT-IP and want …\nParse pseudo-header path for CONNECT UDP to SocketAddr\nBind the server to listen to an address\nWaits for new connecting clients. If the client doesn’t …\nCreates a new HTTP/3 connection for an existing &amp; …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nClient handler that handles the connection for a single …\nProcesses an HTTP/3 event\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the socket address the server is bound to. Returns …\nReads the known-clients toml file from disk and parses it …\nCreates a TUN socket and sets it up in the system. Will …")